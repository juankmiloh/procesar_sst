<?php

namespace app\controllers;

use yii\filters\AccessControl;
use yii\web\Controller;
use app\helpers\datatables;
use yii\helpers\Url;
use Yii;


class CampeonatoController extends Controller
{
    public $escenario;
    
    /**
     * Control de acceso
     * @return type
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['listar', 'data', 'editar', 'torneos', 'listarfases', 'datafases', 'editarfases', 'editarfasesestado'], // add all actions to take guest to login page
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
                'denyCallback' => function ($rule, $action) {
                        $user = "NO AUTH USER";
                        if(Yii::$app->user->identity != null){
                            $user = Yii::$app->user->identity->usu_num_doc;
                        }
                    throw new \Exception('User '. $user .', not allowed to access controller: "'.$action->controller->id.'", action: '.$action->actionMethod);
                }
            ],
        ];
    }
    
    /**
     * Cambia el estado de una fase
     */
    public function actionEditarfasesestado(){
        
    }
    
     /*
     * Renderiza la vista torneos
     */
    public function actionTorneos(){
        $deportes = \app\models\Deporte::find()->where('dep_estado = '.ESTADO_ACTIVO)->all();
        return $this->render('torneos',  array('deportes' => $deportes));
    }
    
    /*
     * Renderiza la vista listar
     */
    public function actionListar(){
        return $this->render('listar', array('idDeporte' => $_GET['idDeporte']));
    }
    
    /**
     * Retorna lista con los registros. 
     */
    public function actionData(){
        
        //Columnas a consultar
        $columns = array(
            array( 'db' => 'camp_id', 'dt' => 0 ),
            array( 'db' => 'camp_nombre', 'dt' => 1 ),
            array( 'db' => 'cat_id', 'dt' => 2,
                    'formatter' => function( $d, $row ) {
                            return \app\models\Categoria::find()->where('cat_id = '.$d)->one()->cat_nombre;
                    }
                ),
            array( 'db' => 'tipo_deporte_id', 'dt' => 3,
                'formatter' => function( $d, $row ) {
                        return \app\models\TipoDeporte::find()->where('td_id = '.$d)->one()->td_nombre;
                }
            ),
            array( 'db' => 'dep_id', 'dt' => 4,
                'formatter' => function( $d, $row ) {
                        return \app\models\Deporte::find()->where('dep_id = '.$d)->one()->dep_nombre;
                }
            ),
            array( 'db' => 'camp_genero', 'dt' => 5),
            array( 'db' => 'camp_id', 'dt' => 6,
                'formatter' => function( $d, $row ) {
                        if($row['camp_estado'] == ESTADO_ACTIVO){
                            return '<button class="btn btn-danger" onclick="listarFases('.$row['camp_id'].')">'.Yii::t('app',"FASES").'</button>';
                        } else {
                            return "";
                        }
                }
            ),
            array( 'db' => 'camp_estado', 'dt' => 7, 
                'formatter' => function( $d, $row ) {
                    if($d == ESTADO_ACTIVO){
                        return '<button class="btn btn-success" onclick="cambiarEstado('.$row['camp_id'].','.ESTADO_INACTIVO.')">'.Yii::t('app',"ACTIVO").'</button>';
                    }else{
                        return '<button class="btn btn-warning" onclick="cambiarEstado('.$row['camp_id'].','.ESTADO_ACTIVO.')">'.Yii::t('app',"INACTIVO").'</button>';
                    }
                }
            ),
        );
        
        //Indice
        $primaryKey = "camp_id";
        
        //Tabla
        $table = "campeonato";
        
        
        if(isset($_GET['idDeporte'])){
            //Filtramos para que solo traiga las fases del campeonato indicado
            $_GET['columns'][4]['search']['value'] = $_GET['idDeporte'];
        }
        
        echo json_encode(
                datatables::simple( $_GET,$table, $primaryKey, $columns )
        );

    }
    
    /**
     * Recibe una solicitud de tipo GET para crear un nuevo registro
     */
    public function actionEditar(){
        
            /**
             * Consulta un registro
             */
            if(isset($_GET['id'])){ 
                
                $registro = \app\models\Campeonato::find()->where('camp_id = '.$_GET['id'])->one();
                $escenarios = \app\models\CampeonatoTieneEscenarios::find()->where('camp_id = '.$registro->camp_id)->select('esc_id')->asArray()->all();
                $data = $registro->attributes;
                array_push($data, $escenarios);
                $r = json_encode($data);
                echo $r;
            } 
            /**
             * Cambia el estado de un registro
             */
            else if(isset($_GET['idCampeonato'])){
                $registro = \app\models\Campeonato::find()->where('camp_id = '.$_GET['idCampeonato'])->one();
                $registro->camp_estado = $_GET['estado'];
                $registro->save();
            }
            /**
             * Crea un registro
             */
            else if(isset($_GET['camp_genero'])){
                
                $registro = new \app\models\Campeonato();
                
                if(isset($_GET['idRegistro']) && $_GET['idRegistro'] != ""){
                    $registro = \app\models\Campeonato::find()->where('camp_id = '.$_GET['idRegistro'])->one();
                    
                    //Eliminamos los sedes actuales del evento
                    \app\models\CampeonatoTieneEscenarios::deleteAll(['camp_id' => $_GET['idRegistro']]);
                }              

                /**
                 * Guarda los valores de las variables. 
                 */
                foreach ($registro as $attribute => $value) {
                    if(isset($_GET[$attribute])){
                        $registro->$attribute = $_GET[$attribute];
                    }
                }

                $deporte = \app\models\Deporte::find()->where('dep_id = '.$registro->dep_id)->one()->dep_nombre;
                $categoria = \app\models\Categoria::find()->where('cat_id = '.$registro->cat_id)->one()->cat_nombre;
                $registro->camp_nombre = "Campeonato - ".$deporte." - ".$categoria." - ".$registro->camp_genero;
                if($registro->validate()){
                    $registro->save();
                    
                    /**
                     * Guarda los escenarios del campeonato
                     */
                    $escenario = $_GET['escenario'];
                    for($i = 0; $i < count($escenario); $i++){
                        $cte = new \app\models\CampeonatoTieneEscenarios();
                        $cte->esc_id = $escenario[$i];
                        $cte->camp_id = $registro->camp_id;
                        if($cte->validate())
                            $cte->save();
                    }
                    
                    echo true;
                } else {
                    echo false;
                } 
            } else {
                echo false;
            }
            
    }
    
    /*
     * Renderiza la vista listar fases de campeonato
     */
    public function actionListarfases(){
        $idCampeonato = $_GET['idCamp'];
        $campeonato = \app\models\Campeonato::find()->where('camp_id = '.$idCampeonato)->one();
        
        return $this->render('listarfases', array('campeonato' => $campeonato));
    }
    
    
    /**
     * Retorna lista con los registros. 
     */
    public function actionDatafases(){
        
        //Columnas a consultar
        $columns = array(
            array( 'db' => 'ctf_id', 'dt' => 0 ),
            array( 'db' => 'camp_id', 'dt' => 1 ,
                    'formatter' => function( $d, $row ) {
                            return \app\models\Campeonato::find()->where('camp_id = '.$d)->one()->camp_nombre;
                    }
                ),
            array( 'db' => 'ctf_nombre', 'dt' => 2), 
            array( 'db' => 'ctf_tipo_eliminacion', 'dt' => 3, 
                    'formatter' => function( $d, $row ) {
                            $tiposElim = unserialize(TIPO_ELIMINACION);
                            return $tiposElim[$d];
                    }
                ),
            array( 'db' => 'ctf_ida_vuelta', 'dt' => 4 , 
                    'formatter' => function( $d, $row ) {
                            $tipos = unserialize(IDA_VUELTA);
                            return $tipos[$d];
                    }
                ),
            array( 'db' => 'ctf_ida_vuelta', 'dt' => 5 , 
                    'formatter' => function( $d, $row ) {
                            $url = "window.location.href = '".Url::to(['programacion/sorteo', 'ctf_id' => $row['ctf_id']])."'";
                            return '<button class="btn btn-warning" onclick="'.$url.'">'.Yii::t('app',"PROGRAMACION").'</button>';
                    }
                ),
            array( 'db' => 'ctf_ida_vuelta', 'dt' => 6 , 
                    'formatter' => function( $d, $row ) {
                    
                            $maxFaseId = \app\models\CampeonatoTieneFases::find()
                                ->where('camp_id = '.$_GET['camp_id'])
                                ->select('max(ctf_id)') // we need only one column
                                ->scalar();
                    
                            //Solo se puede eliminar la ultima fase
                            if($maxFaseId == $row['ctf_id']){
                                return '<button class="btn btn-danger" onclick="eliminarFase('.$row['ctf_id'].')">'.Yii::t('app',"ELIMINAR").'</button>';
                            } else {
                                return "";
                            }
                    }
                ),
        );
        
        //Indice
        $primaryKey = "ctf_id";
        
        //Tabla
        $table = "campeonato_tiene_fases";
        
        //Filtramos para que solo traiga las fases del campeonato indicado
        $_GET['columns'][1]['search']['value'] = $_GET['camp_id'];
        
        echo json_encode(
                datatables::simple( $_GET, $table, $primaryKey, $columns )
        );

    }
    
    /**
     * Recibe una solicitud de tipo GET para crear un nuevo registro
     */
    public function actionEditarfases(){
        
            /**
             * Consulta un registro
             */
            if(isset($_GET['id'])){ 
                
                $registro = \app\models\CampeonatoTieneFases::find()->where('ctf_id = '.$_GET['id'])->one();
                $r = json_encode($registro->attributes);
                echo $r;
            } 
            /**
             * Elimina un registro
             */
            if(isset($_GET['idToDelete'])){ 
                
                $registro = \app\models\CampeonatoTieneFases::find()->where('ctf_id = '.$_GET['idToDelete'])->one();
                try{
                    $registro->delete();
                    echo true;
                } catch (Exception $ex) {
                    echo false;
                }
                
            } 
           
            /**
             * Crea un registro
             */
            else if(isset($_GET['ctf_nombre'])){
                
                $registro = new \app\models\CampeonatoTieneFases();
                
                if(isset($_GET['idRegistro']) && $_GET['idRegistro'] != ""){
                    $registro = \app\models\CampeonatoTieneFases::find()->where('ctf_id = '.$_GET['idRegistro'])->one();
                }              

                /**
                 * Guarda los valores de las variables. 
                 */
                foreach ($registro as $attribute => $value) {
                    if(isset($_GET[$attribute])){
                        $registro->$attribute = $_GET[$attribute];
                    }
                }

                if($registro->validate()){
                    $registro->save();
                    echo true;
                } else {
                    echo false;
                } 
            } else {
                echo false;
            }
            
    }
}
