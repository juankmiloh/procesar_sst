<?php

namespace app\models;

use Yii;
use app\helpers\Security;

/**
 * This is the model class for table "usuario".
 *
 * @property integer $usu_id
 * @property string $usu_contrasena
 * @property string $usu_nombres
 * @property string $usu_apellidos
 * @property integer $usu_tipo_doc
 * @property string $usu_num_doc
 * @property string $usu_hash_key
 * @property string $usu_fecha_creacion
 * @property integer $usu_estado
 * @property integer $usu_cambiar_contrasena
 *
 * @property TipoDocumento $usuTipoDoc
 * @property UsuarioTieneRol[] $usuarioTieneRols
 */
class Usuario extends \yii\db\ActiveRecord implements \yii\web\IdentityInterface
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'usuario';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['usu_contrasena'], 'required'],
            [['usu_tipo_doc', 'usu_estado', 'usu_cambiar_contrasena'], 'integer'],
            [['usu_hash_key'], 'string'],
            [['usu_fecha_creacion'], 'safe'],
            [['usu_contrasena', 'usu_nombres', 'usu_apellidos'], 'string', 'max' => 55],
            [['usu_num_doc'], 'string', 'max' => 15],
            [['usu_num_doc'], 'unique'],
            [['usu_tipo_doc'], 'exist', 'skipOnError' => true, 'targetClass' => TipoDocumento::className(), 'targetAttribute' => ['usu_tipo_doc' => 'tid_id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'usu_id' => Yii::t('app', 'PK'),
            'usu_contrasena' => Yii::t('app', 'Contraseña'),
            'usu_nombres' => Yii::t('app', 'Nombres'),
            'usu_apellidos' => Yii::t('app', 'Apellidos'),
            'usu_tipo_doc' => Yii::t('app', 'Tipo de documento'),
            'usu_num_doc' => Yii::t('app', 'Número de documento'),
            'usu_hash_key' => Yii::t('app', 'Hash con el que se encripta los datos'),
            'usu_fecha_creacion' => Yii::t('app', 'Fecha de creación'),
            'usu_estado' => Yii::t('app', 'Estado, 1-Activo, 0-Inactivo'),
            'usu_cambiar_contrasena' => Yii::t('app', 'Cambiar contraseña, 0-Debe cambiar contraseña, 1-Contraseña actualizada correctamente'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsuTipoDoc()
    {
        return $this->hasOne(TipoDocumento::className(), ['tid_id' => 'usu_tipo_doc']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsuarioTieneRols()
    {
        return $this->hasMany(UsuarioTieneRol::className(), ['usu_id' => 'usu_id']);
    }
    
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * @inheritdoc
     */
/* modified */
    public static function findIdentityByAccessToken($token, $type = null)
    {
          return static::findOne(['access_token' => $token]);
    }
 
    /**
     * Finds user by username
     *
     * @param  string      $username
     * @return static|null
     */
    public static function findByUsername($username, $pass)
    {
        $user = Usuario::find()->where(['usu_num_doc' => $username])->one();
        if($user != null && $user->usu_estado == ESTADO_ACTIVO){
            return new static($user);
            $password = Security::encode($pass, $user->usu_hash_key);
            if($password == $user->usu_contrasena){
                return new static($user);
            }
        }
        return null;
    }

    /**
     * Finds user by password reset token
     *
     * @param  string      $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        $expire = \Yii::$app->params['user.passwordResetTokenExpire'];
        $parts = explode('_', $token);
        $timestamp = (int) end($parts);
        if ($timestamp + $expire < time()) {
            // token expired
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token
        ]);
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->usu_hash_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param  string  $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return $this->password === sha1($password);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Security::generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Security::generateRandomKey();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Security::generateRandomKey() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }
}
